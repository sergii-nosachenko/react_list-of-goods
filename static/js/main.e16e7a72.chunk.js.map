{"version":3,"sources":["App.tsx","components/Goods/Goods.tsx","index.tsx"],"names":["SortType","Goods","props","visibleGoods","length","Paper","elevation","sx","width","maxWidth","List","className","disablePadding","map","good","index","goods","ListItem","ListItemText","primary","Divider","goodsFromServer","initialState","isStarted","isInitial","isReversed","sortType","NONE","minLength","App","state","start","setState","sort","reverse","adjustLength","_1","newValue","reset","this","filter","a","b","ALPABET","localeCompare","LENGTH","getReorderedGoods","Box","Grid","container","direction","justifyContent","alignItems","item","marginBottom","Button","type","onClick","variant","color","Stack","spacing","ButtonGroup","Typography","display","whiteSpace","margin","Slider","value","marks","min","max","valueLabelDisplay","onChange","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e16e7a72.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Component } from 'react';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Slider from '@mui/material/Slider';\n\nimport { Goods } from './components/Goods/Goods';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n  minLength: number,\n) {\n  const visibleGoods = [...goods].filter(good => good.length >= minLength);\n\n  if (sortType !== SortType.NONE) {\n    visibleGoods.sort((a, b) => {\n      switch (sortType) {\n        case SortType.ALPABET:\n          return a.localeCompare(b);\n        case SortType.LENGTH:\n          return a.length - b.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype State = {\n  isStarted: boolean,\n  isInitial: boolean,\n  isReversed: boolean,\n  sortType: SortType,\n  minLength: number,\n};\n\nconst initialState: State = {\n  isStarted: false,\n  isInitial: true,\n  isReversed: false,\n  sortType: SortType.NONE,\n  minLength: 1,\n};\n\nexport class App extends Component {\n  state: Readonly<State> = { ...initialState };\n\n  start = () => this.setState({\n    isStarted: true,\n  });\n\n  sort = (sortType: SortType) => this.setState({\n    sortType,\n    isInitial: false,\n  });\n\n  reverse = () => this.setState((state: State) => ({\n    isReversed: !state.isReversed,\n    isInitial: false,\n  }));\n\n  adjustLength = (_1: Event, newValue: number | number[]) => this.setState({\n    minLength: +newValue,\n    isInitial: false,\n  });\n\n  reset = () => this.setState({\n    ...initialState,\n    isStarted: true,\n  });\n\n  render() {\n    const {\n      isStarted,\n      isReversed,\n      sortType,\n      minLength,\n      isInitial,\n    } = this.state;\n\n    const visibleGoods = getReorderedGoods(\n      goodsFromServer,\n      sortType,\n      isReversed,\n      minLength,\n    );\n\n    return (\n      <Box>\n        <Grid\n          className=\"App\"\n          container\n          direction=\"column\"\n          justifyContent=\"flex-start\"\n          alignItems=\"center\"\n        >\n          <Grid\n            className=\"App__controls\"\n            item\n            sx={{\n              marginBottom: '24px',\n            }}\n          >\n            {!isStarted && (\n              <Button\n                type=\"button\"\n                onClick={this.start}\n                variant=\"contained\"\n                color=\"success\"\n              >\n                Start\n              </Button>\n            )}\n\n            {isStarted && (\n              <Stack direction=\"column\" spacing={2}>\n                <ButtonGroup variant=\"contained\">\n                  <Button\n                    type=\"button\"\n                    onClick={() => this.sort(SortType.ALPABET)}\n                    color={\n                      sortType === SortType.ALPABET\n                        ? 'success'\n                        : 'primary'\n                    }\n                  >\n                    Sort alphabetically\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    onClick={() => this.sort(SortType.LENGTH)}\n                    color={\n                      sortType === SortType.LENGTH\n                        ? 'success'\n                        : 'primary'\n                    }\n                  >\n                    Sort by length\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    onClick={this.reverse}\n                    color={\n                      isReversed\n                        ? 'success'\n                        : 'primary'\n                    }\n                  >\n                    Reverse\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    onClick={this.reset}\n                    color=\"error\"\n                    variant={\n                      isInitial\n                        ? 'outlined'\n                        : 'contained'\n                    }\n                  >\n                    Reset\n                  </Button>\n                </ButtonGroup>\n                <Stack direction=\"row\" spacing={2}>\n                  <Typography\n                    variant=\"button\"\n                    display=\"block\"\n                    sx={{\n                      whiteSpace: 'nowrap',\n                      margin: 'auto',\n                    }}\n                  >\n                    {'Minimal good\\'s length: '}\n                  </Typography>\n                  <Slider\n                    value={minLength}\n                    marks\n                    min={1}\n                    max={10}\n                    valueLabelDisplay=\"auto\"\n                    onChange={this.adjustLength}\n                  />\n                </Stack>\n              </Stack>\n            )}\n          </Grid>\n          {isStarted && <Goods visibleGoods={visibleGoods} />}\n        </Grid>\n      </Box>\n    );\n  }\n}\n","import Paper from '@mui/material/Paper';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Divider from '@mui/material/Divider';\n\ntype Props = {\n  visibleGoods: string[],\n};\n\nexport const Goods: React.FC<Props> = (props) => {\n  const { visibleGoods } = props;\n\n  if (!visibleGoods.length) {\n    return null;\n  }\n\n  return (\n    <Paper\n      elevation={8}\n      sx={\n        {\n          width: '100%',\n          maxWidth: 360,\n        }\n      }\n    >\n      <List\n        className=\"Goods\"\n        disablePadding\n      >\n        {visibleGoods.map((good, index, goods) => (\n          <>\n            <ListItem\n              className=\"Goods__item\"\n              key={`${good}`}\n            >\n              <ListItemText primary={good} />\n            </ListItem>\n            {index !== goods.length - 1 && (\n              <Divider />\n            )}\n          </>\n        ))}\n      </List>\n    </Paper>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}